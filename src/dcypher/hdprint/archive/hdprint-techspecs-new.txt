HDPRINT COMPREHENSIVE SPECIFICATION AND GUIDE
============================================================
Complete guide from basic features to implementation details
All values derived from actual implementation - no hardcoded values
Multiple test vectors for comprehensive verification
Structure: Overview → Security → Validation → Technical Details

TEST VECTORS:
--------------------
VECTOR_0: 1 bytes - b'0'...
VECTOR_1: 33 bytes - b'HDPRINT_GOLD_MASTER_TEST_VECTOR_'...
VECTOR_2: 1337 bytes - b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'...


HDPRINT FEATURES AND SIZE OPTIONS
=================================

HIERARCHICAL PROGRESSION (VECTOR_1):
----------------------------------------
TINY     '4pZ4sC'
         Pattern: [6]
         Length: 6 chars, Security: 17.6 bits

SMALL    '4pZ4sC_TqFB5FDs'
         Pattern: [6, 8]
         Length: 15 chars, Security: 64.4 bits

MEDIUM   '4pZ4sC_TqFB5FDs_VcE9fjQK'
         Pattern: [6, 8, 8]
         Length: 24 chars, Security: 111.3 bits

RACK     '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo'
         Pattern: [6, 8, 8, 8]
         Length: 33 chars, Security: 158.2 bits

[PASS] SMALL starts with TINY (hierarchical nesting)
[PASS] MEDIUM starts with SMALL (hierarchical nesting)
[PASS] RACK starts with MEDIUM (hierarchical nesting)

SECURITY LEVELS AND CAPABILITIES
================================

SECURITY CALCULATIONS (VECTOR_1):
----------------------------------------
tiny          6 chars    17.6 bits  LOW
             '4pZ4sC'

[PASS] tiny has positive security bits
small        15 chars    64.4 bits  LOW
             '4pZ4sC_TqFB5FDs'

[PASS] small has positive security bits
medium       24 chars   111.3 bits  MODERATE
             '4pZ4sC_TqFB5FDs_VcE9fjQK'

[PASS] medium has positive security bits
rack         33 chars   158.2 bits  HIGH
             '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo'

[PASS] rack has positive security bits
2 racks      67 chars   333.9 bits  HIGH
             '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo_PN4NKm_Uctdrk7a_dTMd5vqq_EjXJR5Zq'

[PASS] 2 racks has positive security bits
3 racks      101 chars   509.6 bits  HIGH
             '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo_PN4NKm_Uctdrk7a_dTMd5vqq_EjXJR5Zq_tNGKA2_9fxuaDvC_XTfq72vo_7aeWXPQC'

[PASS] 3 racks has positive security bits

ALGORITHM VALIDATION ACROSS MULTIPLE INPUTS
===========================================

DETERMINISTIC ALGORITHM VERIFICATION:
----------------------------------------
Testing same algorithm with different inputs to verify:
1. Deterministic behavior (same input = same output)
2. Input sensitivity (different input = different output)
3. Hierarchical nesting consistency across vectors
4. Edge case handling (empty keys)

TEST VECTOR_0:
Key: b'0'
Length: 1 bytes
VECTOR_0 (hex)                           0x30

  TINY     'HsDv98'
           Length: 6 chars, Security: 17.6 bits
  SMALL    'HsDv98_fw3rSHY2'
           Length: 15 chars, Security: 64.4 bits
  MEDIUM   'HsDv98_fw3rSHY2_8qZhumdD'
           Length: 24 chars, Security: 111.3 bits
  RACK     'HsDv98_fw3rSHY2_8qZhumdD_BLcSxfaT'
           Length: 33 chars, Security: 158.2 bits

[PASS] VECTOR_0: SMALL starts with TINY
[PASS] VECTOR_0: MEDIUM starts with SMALL
[PASS] VECTOR_0: RACK starts with MEDIUM
TEST VECTOR_1:
Key: b'HDPRINT_GOLD_MASTER_TEST_VECTOR_1'
Length: 33 bytes
VECTOR_1 (hex)                           0x48445052494e545f474f4c445f4d4153...

  TINY     '4pZ4sC'
           Length: 6 chars, Security: 17.6 bits
  SMALL    '4pZ4sC_TqFB5FDs'
           Length: 15 chars, Security: 64.4 bits
  MEDIUM   '4pZ4sC_TqFB5FDs_VcE9fjQK'
           Length: 24 chars, Security: 111.3 bits
  RACK     '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo'
           Length: 33 chars, Security: 158.2 bits

[PASS] VECTOR_1: SMALL starts with TINY
[PASS] VECTOR_1: MEDIUM starts with SMALL
[PASS] VECTOR_1: RACK starts with MEDIUM
TEST VECTOR_2:
Key: b
Length: 1337 bytes
VECTOR_2 (hex)                           0x41414141414141414141414141414141...

  TINY     'Tkndqr'
           Length: 6 chars, Security: 17.6 bits
  SMALL    'Tkndqr_HTStqMQH'
           Length: 15 chars, Security: 64.4 bits
  MEDIUM   'Tkndqr_HTStqMQH_XuKJXN1Q'
           Length: 24 chars, Security: 111.3 bits
  RACK     'Tkndqr_HTStqMQH_XuKJXN1Q_uW1BjBXu'
           Length: 33 chars, Security: 158.2 bits

[PASS] VECTOR_2: SMALL starts with TINY
[PASS] VECTOR_2: MEDIUM starts with SMALL
[PASS] VECTOR_2: RACK starts with MEDIUM
CROSS-VECTOR VERIFICATION:
----------------------------------------
[PASS] VECTOR_0 and VECTOR_1 produce different tiny results
[PASS] VECTOR_0 and VECTOR_1 produce different small results
[PASS] VECTOR_0 and VECTOR_1 produce different medium results
[PASS] VECTOR_0 and VECTOR_1 produce different rack results
[PASS] VECTOR_0 and VECTOR_2 produce different tiny results
[PASS] VECTOR_0 and VECTOR_2 produce different small results
[PASS] VECTOR_0 and VECTOR_2 produce different medium results
[PASS] VECTOR_0 and VECTOR_2 produce different rack results
[PASS] VECTOR_1 and VECTOR_2 produce different tiny results
[PASS] VECTOR_1 and VECTOR_2 produce different small results
[PASS] VECTOR_1 and VECTOR_2 produce different medium results
[PASS] VECTOR_1 and VECTOR_2 produce different rack results

DETERMINISTIC BEHAVIOR VERIFICATION:
----------------------------------------
[PASS] VECTOR_0 tiny is deterministic (consistent regeneration)
[PASS] VECTOR_0 small is deterministic (consistent regeneration)
[PASS] VECTOR_1 tiny is deterministic (consistent regeneration)
[PASS] VECTOR_1 small is deterministic (consistent regeneration)
[PASS] VECTOR_2 tiny is deterministic (consistent regeneration)
[PASS] VECTOR_2 small is deterministic (consistent regeneration)

STEP-BY-STEP ALGORITHM EXECUTION
================================

LIBRARY EXECUTION STEPS (VECTOR_1, MEDIUM):
----------------------------------------
 1. Initial data: 33 bytes (public key)
 2. Configuration: size 'medium'
 3. Pattern: [6, 8, 8] (total 22 characters)
 4. Base pattern [6,8,8,8] cyclical for 3 segments
 5. Char 1: HMAC(33 bytes) -> 64 bytes -> base58[...4] -> '4'
 6. Char 2: HMAC(64 bytes) -> 64 bytes -> base58[...p] -> 'p'
 7. Char 3: HMAC(64 bytes) -> 64 bytes -> base58[...Z] -> 'Z'
 8. Char 4: HMAC(64 bytes) -> 64 bytes -> base58[...4] -> '4'
 9. Char 5: HMAC(64 bytes) -> 64 bytes -> base58[...s] -> 's'
10. Char 6: HMAC(64 bytes) -> 64 bytes -> base58[...C] -> 'C'
11. Char 7: HMAC(64 bytes) -> 64 bytes -> base58[...T] -> 'T'
12. Char 8: HMAC(64 bytes) -> 64 bytes -> base58[...q] -> 'q'
13. Char 9: HMAC(64 bytes) -> 64 bytes -> base58[...F] -> 'F'
14. Char 10: HMAC(64 bytes) -> 64 bytes -> base58[...B] -> 'B'
15. Char 11: HMAC(64 bytes) -> 64 bytes -> base58[...5] -> '5'
16. Char 12: HMAC(64 bytes) -> 64 bytes -> base58[...F] -> 'F'
17. Char 13: HMAC(64 bytes) -> 64 bytes -> base58[...D] -> 'D'
18. Char 14: HMAC(64 bytes) -> 64 bytes -> base58[...s] -> 's'
19. Char 15: HMAC(64 bytes) -> 64 bytes -> base58[...V] -> 'V'
20. Char 16: HMAC(64 bytes) -> 64 bytes -> base58[...c] -> 'c'
21. Char 17: HMAC(64 bytes) -> 64 bytes -> base58[...E] -> 'E'
22. Char 18: HMAC(64 bytes) -> 64 bytes -> base58[...9] -> '9'
23. Char 19: HMAC(64 bytes) -> 64 bytes -> base58[...f] -> 'f'
24. Char 20: HMAC(64 bytes) -> 64 bytes -> base58[...j] -> 'j'
25. Char 21: HMAC(64 bytes) -> 64 bytes -> base58[...Q] -> 'Q'
26. Char 22: HMAC(64 bytes) -> 64 bytes -> base58[...K] -> 'K'
27. Segment 1: chars 1-6 -> '4pZ4sC'
28. Segment 2: chars 7-14 -> 'TqFB5FDs'
29. Segment 3: chars 15-22 -> 'VcE9fjQK'
30. Final fingerprint: 4pZ4sC_TqFB5FDs_VcE9fjQK

Final result: '4pZ4sC_TqFB5FDs_VcE9fjQK'
[PASS] Detailed execution matches direct generation

DEEP DIVE: CRYPTOGRAPHIC ALGORITHM INTERNALS
============================================

PATTERN GENERATION:
----------------------------------------
TINY       1 segments -> [6]
[PASS] tiny pattern matches size_info
SMALL      2 segments -> [6, 8]
[PASS] small pattern matches size_info
MEDIUM     3 segments -> [6, 8, 8]
[PASS] medium pattern matches size_info
RACK       4 segments -> [6, 8, 8, 8]
[PASS] rack pattern matches size_info

HMAC CHAIN DEMONSTRATION (TINY size with VECTOR_1):
----------------------------------------
Test Key: VECTOR_1
Size: tiny, Segments: 1, Pattern: [6]
Total characters needed: 6

CHARACTER 1 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               33 bytes
Data (hex)                               0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
HMAC-SHA3-512                            64 bytes
HMAC Result                              0x6ccf0fed2326d61a903480fec9249a728711e8acaa629d4fe23a9276ba48e465...
Base58 Full                              3BBAttNG2nfCbBufKhXkDrzk3WuGTert5YiYMffhR3cRP2eEVwbj4ztysN5KKGf6SwryuXZVh7JXCC4QhYKMKbx4
Last Character                           '4'
Character Position                       87 (0-indexed)
[PASS] Character 1 HMAC matches internal function

CHARACTER 2 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               64 bytes
Data (hex)                               0x6ccf0fed2326d61a903480fec9249a728711e8acaa629d4fe23a9276ba48e465...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0x5135a1c6001b0ba46bbaf44c24d9841c20013ac478f967abb1843117b73b407c
HMAC-SHA3-512                            64 bytes
HMAC Result                              0x209aba1d6fd7323e4d7afc764023152b948581bcc57ce4a3f1538229ec918d48...
Base58 Full                              eosxty34iqcPhcPrAXeU1EJ1RfMddReVDV7A3n1QvVAocReM7gkk1GA6DKvdiRPEF2hhpj8MpYFiuc3N7ZJRZip
Last Character                           'p'
Character Position                       86 (0-indexed)
[PASS] Character 2 HMAC matches internal function

CHARACTER 3 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               64 bytes
Data (hex)                               0x209aba1d6fd7323e4d7afc764023152b948581bcc57ce4a3f1538229ec918d48...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0x59ec3b2f1c3ec37504602112c651384e0932e03d9f4374fef28a687240e03e1f
HMAC-SHA3-512                            64 bytes
HMAC Result                              0xca9b1e728181674dcb392c234f08eb00fd6ac69445268fea0eeb46fe31b7dae3...
Base58 Full                              53whHVsSzjcwZQPb9oSozvegTKDDyFdZuhvXi2CJMmCHcd4QrAWEXb74SaewBRPtoo8VJqSP9YQXxx2kbeSwxzXZ
Last Character                           'Z'
Character Position                       87 (0-indexed)
[PASS] Character 3 HMAC matches internal function

CHARACTER 4 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               64 bytes
Data (hex)                               0xca9b1e728181674dcb392c234f08eb00fd6ac69445268fea0eeb46fe31b7dae3...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0x58015b9cb45de4eab1cb5bee0cc4b342c89c4959943799a61150de565b5b0ff4
HMAC-SHA3-512                            64 bytes
HMAC Result                              0x3b50a4ea3fb7024f63adbb4bc1c31f698ba72e9bdc96251b3b6edf96c99995bd...
Base58 Full                              2BnMmV2CM762zzegbStPYYRJr4GkM5THcLMQDt2p9VFbiZ9j681NdCE6jChwE2wppEugAwgvwjq1MdtK8xxpGzp4
Last Character                           '4'
Character Position                       87 (0-indexed)
[PASS] Character 4 HMAC matches internal function

CHARACTER 5 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               64 bytes
Data (hex)                               0x3b50a4ea3fb7024f63adbb4bc1c31f698ba72e9bdc96251b3b6edf96c99995bd...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0x47bb844ba4ee806b5cdd0f3de3cf413388498103599e02828de93752b1ab70d0
HMAC-SHA3-512                            64 bytes
HMAC Result                              0xf72fde78219e42adb7f16dcd9e5f9d16aa68a5de3da46595c2185cc52a65e0b8...
Base58 Full                              5we68zrZq5faepDYUWBgQZTCdTgT7jSb69bzkWhsR14AGrxeMa87jkskPJZxQhf1mNkiAw2CxfnzsT3gD9PRctjs
Last Character                           's'
Character Position                       87 (0-indexed)
[PASS] Character 5 HMAC matches internal function

CHARACTER 6 GENERATION:
------------------------------
HMAC-SHA3-512 CHAIN INTERNALS:
----------------------------------------
Input Key                                33 bytes
Key (hex)                                0x48445052494e545f474f4c445f4d41535445525f544553545f564543544f525f...
Input Data                               64 bytes
Data (hex)                               0xf72fde78219e42adb7f16dcd9e5f9d16aa68a5de3da46595c2185cc52a65e0b8...
BLAKE3 Key                               32 bytes
BLAKE3(key)                              0xcd5084a8f94650e319251c389fba553068c65ad8dcf6bf2b0d87da81d0b35670
BLAKE3 Data                              32 bytes
BLAKE3(data)                             0x9bd07a29d22d586e7f69dc91f4d1a73400d60e5614b584f4823e225b828004e9
HMAC-SHA3-512                            64 bytes
HMAC Result                              0x3987e5567ca39dd5e291c80b6423154dfb1f29e28742435f541bf7fde85e5616...
Base58 Full                              29iMrw9m66JWbY76uc2fuwZ9f4SkL1NAoV2y9F11ts725yJGEZRzf29suiZ3hJrAaXSJjsFtY3chuirgPpjH9m1C
Last Character                           'C'
Character Position                       87 (0-indexed)
[PASS] Character 6 HMAC matches internal function

Manual construction: '4pZ4sC'
Library result:      '4pZ4sC'
[PASS] Manual construction matches library implementation

IMPLEMENTATION GUIDE: MANUAL ALGORITHM VERIFICATION
===================================================

TO MANUALLY VERIFY HDPRINT ALGORITHM:
----------------------------------------
1. Start with a test key (bytes)
2. For each character position:
   a. Apply BLAKE3 to both key and current data
   b. Compute HMAC-SHA3-512(blake3_key, blake3_data)
   c. Base58 encode the HMAC result
   d. Take the LAST character
   e. Set current_data = HMAC result for next iteration
3. Group characters according to pattern [6,8,8,8]
4. Join segments with underscores

VERIFICATION EXAMPLES (multiple vectors):
----------------------------------------

VECTOR_0 MANUAL VERIFICATION:
Test key: b'0'
Key length: 1 bytes
CHAIN STEP 1:
  Input key: 30... (1 bytes)
  Input data: 30... (1 bytes)
  HMAC result: df9bd7e53655f728369a6e5a02ae507c... (64 bytes)
  Base58: 5UJHWkr7Xds87sVPke8jHrGQbtney6zT...
  Character 1: 'H'

CHAIN STEP 2:
  Input key: 30... (1 bytes)
  Input data: df9bd7e53655f728369a6e5a02ae507c... (64 bytes)
  HMAC result: 9a3068a2aabf6999f221d72e16d65b5b... (64 bytes)
  Base58: 45oKNsjSyZ8RBaLE5YuFUu3UXu9d7RtA...
  Character 2: 's'

CHAIN STEP 3:
  Input key: 30... (1 bytes)
  Input data: 9a3068a2aabf6999f221d72e16d65b5b... (64 bytes)
  HMAC result: b41a7b5c65658f394f3c670144b05c40... (64 bytes)
  Base58: 4brF1wQH1kWWsB9FAa9V2RL36DKoJ3Dw...
  Character 3: 'D'

Manual chain result: HsD
Library first three: 'HsD'
[PASS] VECTOR_0: Manual calculation step 1 matches library (chain validation)
[PASS] VECTOR_0: Manual calculation step 2 matches library (chain validation)
[PASS] VECTOR_0: Manual calculation step 3 matches library (chain validation)
[PASS] VECTOR_0: Manual chain calculation matches library three-character sequence

VECTOR_1 MANUAL VERIFICATION:
Test key: b'HDPRINT_GOLD_MASTER_TEST_VECTOR_1'
Key length: 33 bytes
CHAIN STEP 1:
  Input key: 48445052494e545f474f4c445f4d4153... (33 bytes)
  Input data: 48445052494e545f474f4c445f4d4153... (33 bytes)
  HMAC result: 6ccf0fed2326d61a903480fec9249a72... (64 bytes)
  Base58: 3BBAttNG2nfCbBufKhXkDrzk3WuGTert...
  Character 1: '4'

CHAIN STEP 2:
  Input key: 48445052494e545f474f4c445f4d4153... (33 bytes)
  Input data: 6ccf0fed2326d61a903480fec9249a72... (64 bytes)
  HMAC result: 209aba1d6fd7323e4d7afc764023152b... (64 bytes)
  Base58: eosxty34iqcPhcPrAXeU1EJ1RfMddReV...
  Character 2: 'p'

CHAIN STEP 3:
  Input key: 48445052494e545f474f4c445f4d4153... (33 bytes)
  Input data: 209aba1d6fd7323e4d7afc764023152b... (64 bytes)
  HMAC result: ca9b1e728181674dcb392c234f08eb00... (64 bytes)
  Base58: 53whHVsSzjcwZQPb9oSozvegTKDDyFdZ...
  Character 3: 'Z'

Manual chain result: 4pZ
Library first three: '4pZ'
[PASS] VECTOR_1: Manual calculation step 1 matches library (chain validation)
[PASS] VECTOR_1: Manual calculation step 2 matches library (chain validation)
[PASS] VECTOR_1: Manual calculation step 3 matches library (chain validation)
[PASS] VECTOR_1: Manual chain calculation matches library three-character sequence

VECTOR_2 MANUAL VERIFICATION:
Test key: b
Key length: 1337 bytes
CHAIN STEP 1:
  Input key: 41414141414141414141414141414141... (1337 bytes)
  Input data: 41414141414141414141414141414141... (1337 bytes)
  HMAC result: ef4dc4a6f4738861d9867789850d3a31... (64 bytes)
  Base58: 5nVtRt7FEmBhCvXtToPRoweWpTReEzp1...
  Character 1: 'T'

CHAIN STEP 2:
  Input key: 41414141414141414141414141414141... (1337 bytes)
  Input data: ef4dc4a6f4738861d9867789850d3a31... (64 bytes)
  HMAC result: 43b88953e8a604b49a1ba549ce1c0639... (64 bytes)
  Base58: 2MXiBXzp7jH6GhJPBzgGVPmSUFjMg5tb...
  Character 2: 'k'

CHAIN STEP 3:
  Input key: 41414141414141414141414141414141... (1337 bytes)
  Input data: 43b88953e8a604b49a1ba549ce1c0639... (64 bytes)
  HMAC result: a2ea581e3bc1f0c8c826aa11a5f60507... (64 bytes)
  Base58: 4FvDxorMaBLBZdTVTDF564jYZQnMzxdd...
  Character 3: 'n'

Manual chain result: Tkn
Library first three: 'Tkn'
[PASS] VECTOR_2: Manual calculation step 1 matches library (chain validation)
[PASS] VECTOR_2: Manual calculation step 2 matches library (chain validation)
[PASS] VECTOR_2: Manual calculation step 3 matches library (chain validation)
[PASS] VECTOR_2: Manual chain calculation matches library three-character sequence

[PASS] Manual verification process confirmed for all vectors
[PASS] Algorithm consistency verified across multiple test cases

IMPLEMENTATION VERIFICATION SUMMARY
===================================

Total implementation checks: 60
Total failures: 0
Test vectors verified: 3
[PASS] IMPLEMENTATION SPECIFICATION VERIFIED

LIVE VALUES FROM IMPLEMENTATION:
  VECTOR_0:
    TINY     'HsDv98'
    SMALL    'HsDv98_fw3rSHY2'
    MEDIUM   'HsDv98_fw3rSHY2_8qZhumdD'
    RACK     'HsDv98_fw3rSHY2_8qZhumdD_BLcSxfaT'
  VECTOR_1:
    TINY     '4pZ4sC'
    SMALL    '4pZ4sC_TqFB5FDs'
    MEDIUM   '4pZ4sC_TqFB5FDs_VcE9fjQK'
    RACK     '4pZ4sC_TqFB5FDs_VcE9fjQK_W1kHargo'
  VECTOR_2:
    TINY     'Tkndqr'
    SMALL    'Tkndqr_HTStqMQH'
    MEDIUM   'Tkndqr_HTStqMQH_XuKJXN1Q'
    RACK     'Tkndqr_HTStqMQH_XuKJXN1Q_uW1BjBXu'

[PASS] All values derived from live implementation
[PASS] Documentation stays in sync with code
[PASS] Manual verification process documented
[PASS] Algorithm consistency verified across multiple vectors
